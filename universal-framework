#!/bin/bash

#-------------------------------------------------------------------------------
# 功能：编译xcode项目并打framework包
# Usage: $0 -project <projectName> -scheme <schemeName> [-productName <productName>] [-embedded] [-output <outputDir>]
#        $0 -workspace <workspaceName> -scheme <schemeName> [-productName <productName>] [-embedded] [-output <outputDir>]
#
# 参数说明：
#     -h|-help                     显示帮助文档
#     -v|-V|-version               显示版本号
#     -project <projectName>
#     -scheme <schemeName>
#     -workspace <workspaceName>
#     -productName <productName>   需要编译的产品名称，若为空则使用 schemeName
#     -embedded                    带上此参数会打包成 embeddedframework
#     -output <outputPath>         输出文件夹, 默认为 project_directory/release
#
#-------------------------------------------------------------------------------
# the constants


bold=$(tput bold)
normal=$(tput sgr0)
# then you can use the variables $bold and $normal to format things:
# echo "this is ${bold}bold  ${normal} but this isn't"

outputDir=

projectPath=
workspacePath=
workspaceName=
scheme=
productName=
frameworkType="framework"

PROJECT_DIR=

# end constants

show_version()
{
        echo "version: 0.1"
        echo "updated date: 2015-10-08"
}

show_usage()
{
        echo "Usage: $0 -project <projectName> -scheme <schemeName> [-productName <productName>] [-embedded] [-output <outputDir>]"
        echo "       $0 -workspace <workspaceName> -scheme <schemeName> [-productName <productName>] [-embedded] [-output <outputDir>]"
        echo "\n"
        echo "Options"
        echo "`printf %-2s ` -h|-help               Display this help and exit"
        echo "`printf %-2s ` -v|-V|-version         Display version and exit"
        echo "`printf %-2s ` -output <path>         Output path"
        echo "`printf %-2s ` -project <NAME>        build the project NAME"
        echo "`printf %-2s ` -workspace <NAME>      build the workspace NAME"
        echo "`printf %-2s ` -scheme <NAME>         build the scheme NAME"
        echo "`printf %-2s ` -productName <NAME>    the product name(without suffix)"
        echo "`printf %-2s ` -embedded              package the product as embeddedframework"
        echo "\n"
}

#-------------------------------------------------------------------------------
# parse parameters
#-------------------------------------------------------------------------------

if [ -d $1 ];then
  PROJECT_DIR="$1"
  for file in $(find "$1" -name "*.xcodeproj" -maxdepth 1); do
    projectPath=${file};break
  done
  shift
fi


while [ $# -gt 0 ]
do
  case "$1" in
      -h|-help)
          show_usage; exit 0
          ;;
      -v|-V|-version)
          show_version; exit 0
          ;;
      -output|-o)
          if [[ -z "$2" ]]; then
            echo "$0: error: option '$1' requires an argument" && show_usage && exit 1
          fi
          outputDir=$2
          shift 2
          ;;
      -project|-p)
          if [[ -z "$2" ]]; then
            echo "$0: error: option '$1' requires an argument" && show_usage && exit 1
          fi
          projectPath=$2; shift 2
          ;;
      -workspace|-w)
          if [[ -z "$2" ]]; then
            echo "$0: error: option '$1' requires an argument" && show_usage && exit 1
          fi
          workspacePath=$2; shift 2
          ;;
      -scheme|-t)
          if [[ -z "$2" ]]; then
            echo "$0: error: option '$1' requires an argument" && show_usage && exit 1
          fi
          scheme=$2; shift 2
          ;;
      -productName)
          if [[ -z "$2" ]]; then
            echo "$0: error: option '$1' requires an argument" && show_usage && exit 1
          fi
          productName=$2; shift 2
          ;;
      -embedded|-e)
          frameworkType="embeddedframework"; shift
          ;;
      --)
          shift
          ;;
      *)  echo "$0: error: invalid option '$1'" && show_usage && exit 1
          ;; # terminate while loop
  esac

done

echo "projectPath: $projectPath"
echo "workspacePath: $workspacePath"
echo "outputDir: $outputDir"

# check the options

if [[ ! -z "$projectPath" && ! -z "$workspacePath" ]]; then
  echo "$0: error: You cannot specify both an Xcode project and a workspace"
  exit 1
fi

if [[ -z "$scheme" ]]; then
  echo "$0: error: You must also specify a scheme."
  exit 1
fi

if [[ ! -z "$projectPath" ]]; then
  PROJECT_DIR="$(dirname "$projectPath")"
elif [[ ! -z "$workspacePath" ]]; then
  PROJECT_DIR="$(dirname "$workspacePath")"
  filename=$(basename "$workspacePath")
  workspaceName="${filename%.*}"
fi

# get the full path of project dir
PROJECT_DIR=`cd $PROJECT_DIR; pwd`

if [[ -z "$productName" ]]; then
  productName=$scheme
fi

if [[ -z "$outputDir" ]]; then
  outputDir=$PROJECT_DIR/release
  mkdir -p "$outputDir"
fi


#-------------------------------------------------------------------------------
# build frameworks
#-------------------------------------------------------------------------------

build_framework() {
  #组合编译命令
  build_cmd='xcodebuild OTHER_CFLAGS="-fembed-bitcode" ONLY_ACTIVE_ARCH=NO -configuration '${CONFIGURATION}

  if [[ $1 == project ]]; then
    build_cmd=$build_cmd' -project '$projectPath
  elif [[ $1 == workspace ]]; then
    build_cmd=$build_cmd' -workspace '$workspacePath
    derivedDataPath=$2
    if [[ ! -z "$derivedDataPath" ]]; then
      build_cmd=$build_cmd' -derivedDataPath '$derivedDataPath
    fi
  fi

  if [[ ! -z "$scheme" ]]; then
    array=($scheme)
    if [[ ${#array[@]} > 1 ]]; then
      build_cmd=${build_cmd}' -scheme '\"${scheme}\"
    else
      build_cmd=${build_cmd}' -scheme '${scheme}
    fi
  fi

  echo "cmd = ${build_cmd}"
  echo "${bold}PROJECT_DIR: ${PROJECT_DIR}${normal}"

  buildDir="${PROJECT_DIR}/build"
  build_cmd_iphoneos=${build_cmd}' -sdk iphoneos CONFIGURATION_BUILD_DIR='${buildDir}/${CONFIGURATION}'-iphoneos archive'
  build_cmd_iphonesimulator=${build_cmd}' -sdk iphonesimulator -destination "platform=iOS Simulator,name=iPhone 6s" CONFIGURATION_BUILD_DIR='${buildDir}/${CONFIGURATION}'-iphonesimulator build'

  # Step 1. Build Device and Simulator versions
  #编译工程
  cd "${PROJECT_DIR}"

  echo "run cmd: ${build_cmd_iphoneos}"
  $build_cmd_iphoneos
  if test $? -ne 0
    then
      echo "${bold}${productName} Archive Failed${normal}"
      return 2
  fi

  echo "run cmd: ${build_cmd_iphonesimulator}"
  eval $build_cmd_iphonesimulator
  if test $? -ne 0
    then
      echo "${bold}${productName} Build Failed${normal}"
      return 2
  fi
}

copy_framework() {
  srcPath=$1
  productPath=$2
  if [[ -d "$productPath" ]]; then
    rm -rf "$productPath"
  fi
  cp -RpLfH "$srcPath" "$productPath"

  if [[ $? != 0 ]]; then
    return 2
  fi
}

copy_framework_as_embedded() {
  srcPath=$1
  productPath=$2
  frameworkPath=$3

  if [[ -d "$productPath" ]]; then
    rm -rf "$productPath"
  fi
  mkdir -p "$productPath"

  cp -RpLfH "$srcPath" "$productPath"

  # make symbol links for resources
  #
  cd "$productPath"

  fatfilePath="${frameworkPath}/${productName}"

  if [[ ! -d "Resources" ]]; then
    mkdir -p "Resources"
  fi

  for file in $(find "${productName}.framework" -name "*.bundle" -maxdepth 1); do
    mv -f "${file}" "Resources/$(basename "${file}")"
  done
  for file in $(find "${productName}.framework" -name "*.png" -maxdepth 1); do
    mv -f "${file}" "Resources/$(basename "${file}")"
  done
  for file in $(find "${productName}.framework" -name "*.nib" -maxdepth 1); do
    mv -f "${file}" "Resources/$(basename "${file}")"
  done

  cd "${PROJECT_DIR}"

  if [[ $? != 0 ]]; then
    return 2
  fi
}

combine_binary_files() {
  binaryPath=$1
  binaryPath_iphoneos=$2
  binaryPath_iphonesimulator=$3

  lipo -create -output "$binaryPath" "$binaryPath_iphonesimulator" "$binaryPath_iphoneos"
  if [[ $? != 0 ]]; then
    return 2
  fi
}

copy_to_outputDir() {
  productPath=$1
  if [[ ! -z "$outputDir" ]]; then
    if [[ ! -d "${outputDir}" ]]; then
      mkdir -p "${outputDir}"
    fi
    if [[ -d "${outputDir}/$(basename "$productPath")" ]]; then
      rm -rf "${outputDir}/$(basename "$productPath")"
    fi
    echo copy to outputDir $outputDir
    cp -RpLfH "${productPath}" "${outputDir}"
  fi
  if [[ $? != 0 ]]; then
    return 2
  fi
}

build_project() {
  BUILD_DIR='build'
  UNIVERSAL_OUTPUTFOLDER=${BUILD_DIR}/${CONFIGURATION}-universal
  if [[ ! -d "$UNIVERSAL_OUTPUTFOLDER" ]]; then
    mkdir -p "$UNIVERSAL_OUTPUTFOLDER"
  fi

  # exit 0
  # Step 1
  build_framework project
  if [[ $? != 0 ]]; then
    return 2
  fi

  # Step 2. Copy the framework structure (from iphoneos build) to the universal folder
  srcPath="${BUILD_DIR}/${CONFIGURATION}-iphoneos/${productName}.framework"

  if [[ "$frameworkType" == "embeddedframework" ]]; then
    productPath="${UNIVERSAL_OUTPUTFOLDER}/${productName}.embeddedframework"
    frameworkPath="${productPath}/${productName}.framework"

    copy_framework_as_embedded $srcPath $productPath $frameworkPath
  else
    productPath="${UNIVERSAL_OUTPUTFOLDER}/${productName}.framework"
    frameworkPath=$productPath

    copy_framework $srcPath $productPath
  fi

  # Step 3. Create universal binary file using lipo and place the combined executable in the copied framework directory
  binaryPath="${frameworkPath}/${productName}"
  binaryPath_iphoneos="${BUILD_DIR}/${CONFIGURATION}-iphoneos/${productName}.framework/${productName}"
  binaryPath_iphonesimulator="${BUILD_DIR}/${CONFIGURATION}-iphonesimulator/${productName}.framework/${productName}"

  combine_binary_files $binaryPath $binaryPath_iphonesimulator $binaryPath_iphoneos

  copy_to_outputDir $productPath

  if [[ $? != 0 ]]; then
    return 2
  fi
}

build_workspace() {
  BUILD_DIR="build"
  UNIVERSAL_OUTPUTFOLDER="${BUILD_DIR}/${CONFIGURATION}-universal"
  if [[ ! -d "$UNIVERSAL_OUTPUTFOLDER" ]]; then
    mkdir -p "$UNIVERSAL_OUTPUTFOLDER"
  fi

  # exit 0
  # Step 1
  build_framework workspace
  if [[ $? != 0 ]]; then
    return 2
  fi

  # Step 2. Copy the framework structure (from iphoneos build) to the universal folder
  srcPath="${BUILD_DIR}/${CONFIGURATION}-iphoneos/${productName}.framework"

  if [[ "$frameworkType" == "embeddedframework" ]]; then
    productPath="${UNIVERSAL_OUTPUTFOLDER}/${productName}.embeddedframework"
    frameworkPath="${productPath}/${productName}.framework"

    copy_framework_as_embedded $srcPath $productPath $frameworkPath
  else
    productPath="${UNIVERSAL_OUTPUTFOLDER}/${productName}.framework"
    frameworkPath=$productPath

    copy_framework $srcPath $productPath
  fi

  # Step 3. Create universal binary file using lipo and place the combined executable in the copied framework directory
  binaryPath="${frameworkPath}/${productName}"
  binaryPath_iphoneos="${BUILD_DIR}/${CONFIGURATION}-iphoneos/${productName}.framework/${productName}"
  binaryPath_iphonesimulator="${BUILD_DIR}/${CONFIGURATION}-iphonesimulator/${productName}.framework/${productName}"

  combine_binary_files $binaryPath $binaryPath_iphonesimulator $binaryPath_iphoneos

  copy_to_outputDir $productPath

  if [[ $? != 0 ]]; then
    return 2
  fi
}


#编译的configuration，默认为Release
CONFIGURATION=Release

cd $PROJECT_DIR

result=0
if [[ ! -z "$projectPath" ]]; then
  build_project
  result=$?
else
  build_workspace
  result=$?
fi

if [[ $result != 0 ]]; then
  exit 2
fi


